console.log("üî• Service Worker –∑–∞–ø—É—â–µ–Ω–æ!");

self.addEventListener("install", (event) => {
    console.log("‚úÖ Service Worker –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ");
    self.skipWaiting(); // –ü—Ä–∏–º—É—Å–æ–≤–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è SW
});

self.addEventListener("activate", (event) => {
    console.log("üöÄ Service Worker –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–æ");
    event.waitUntil(clients.claim()); // –†–æ–±–∏–º–æ SW –∞–∫—Ç–∏–≤–Ω–∏–º –≤—ñ–¥—Ä–∞–∑—É
});

self.addEventListener("fetch", (event) => {
  /*  console.log("FETCH ")*/
/*    const { request } = event;

    if (request.method === "POST" && request.url.includes("/graphql")) {
        event.respondWith(
            (async () => {
                const cache = await caches.open("graphql-cache");
                const requestClone = request.clone();

                const requestBody = await requestClone.json();
                const cacheKey = new Request(request.url + encodeURIComponent(JSON.stringify(requestBody)), {
                    headers: request.headers,
                });

                try {
                    const networkResponse = await fetch(request);
                    const responseClone = networkResponse.clone();
                    await cache.put(cacheKey, responseClone); // –ö–µ—à—É—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å

                    return networkResponse;
                } catch (error) {
                    console.error("Fetch failed, trying cache:", error);

                    const cachedResponse = await cache.match(cacheKey);
                    if (cachedResponse) {
                        return cachedResponse;
                    }

                    return new Response("Network error and no cache available", { status: 500 });
                }
            })()
        );
    }*/
});

